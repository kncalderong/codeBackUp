#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,0.05),  ylim=c(0, 10000))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#dev.off()
#© Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Load pwr package to easily calculate the statistical power
if(!require(pwr)){install.packages('pwr')}
library(pwr)
#Disable scientific notation (1.05e10)
options(scipen=999)
#Set number of simulations
nSims <- 100000 #number of simulated experiments
M<-106 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-100
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,1),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#dev.off()
#© Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
#Load pwr package to easily calculate the statistical power
if(!require(pwr)){install.packages('pwr')}
library(pwr)
#Disable scientific notation (1.05e10)
options(scipen=999)
#Set number of simulations
nSims <- 100000 #number of simulated experiments
M<-106 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-20
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,1),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#dev.off()
#© Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
(sum(p < 0.05)/nSims)
(sum(p < 0.01)/nSims)
#Load pwr package to easily calculate the statistical power
if(!require(pwr)){install.packages('pwr')}
library(pwr)
#Disable scientific notation (1.05e10)
options(scipen=999)
#Set number of simulations
nSims <- 100000 #number of simulated experiments
M<-107 #Mean IQ score in the sample (will be compared with 100 in a one-sample t-test)
n<-51 #set sample size
SD<-15 #SD of the simulated data
#With a mean difference of 6, and SD of 15, and a sample size of 26, the test has 50% power)
p <-numeric(nSims) #set up empty variable to store all simulated p-values
bars<-20
#Run simulation
for(i in 1:nSims){ #for each simulated experiment
x<-rnorm(n = n, mean = M, sd = SD) #Simulate data with specified mean, standard deviation, and sample size
z<-t.test(x, mu=100) #perform the t-test against mu (set to value you want to test against)
p[i]<-z$p.value #get the p-value and store it
}
#Check power by summing significant p-values and dividing by number of simulations
(sum(p < 0.05)/nSims) #power
#Calculate power formally by power analysis
power<-pwr.t.test(d=(M-100)/SD, n=n,sig.level=0.05,type="one.sample",alternative="two.sided")$power #determines M when power > 0. When power = 0, will set  M = 100.
#Plot figure
#png(file="P-valueDist.png",width=4000,height=3000, , units = "px", res = 500)
op <- par(mar = c(5,7,4,4)) #change white-space around graph
hist(p, breaks=bars, xlab="P-values", ylab="number of p-values\n", axes=FALSE,
main=paste("P-value Distribution with",round(power*100, digits=1),"% Power"),
col="grey", xlim=c(0,1),  ylim=c(0, nSims))
axis(side=1, at=seq(0,1, 0.1), labels=seq(0,1,0.1))
axis(side=2, at=seq(0,nSims, nSims/4), labels=seq(0,nSims, nSims/4), las=2)
abline(h=nSims/bars, col = "red", lty=3)
#dev.off()
#© Daniel Lakens, 2016.
# This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/
(sum(p < 0.05)/nSims)
(sum(p < 0.01)/nSims)
clear
n<-15
n
name <- "Luke"
n1<-10
n2<-100
m<-0.5
ls()
ls(pattern = "m")
ls.str()
args(ls)
help(ls)
?ls
help.search("anova")
x<-seq(from=1,to=5,by=1)
mode(x)
length(x)
clear
y<-c(FALSE,TRUE)
y
mode(y)
x>=3
z<-c("order","superfamily","family","genus","species")
mode(z)
z(2)
z[2]
z[c(1,1,1)]
which(x>=5)
which(x>=3)
?runif
names(x)<-z
x
f<-c("Male","Male","Female","Female","Female")
f<-factor(f)
f
table(f)
install.packages("phangorn")
install.packages("phytools")
install.packages("geiger")
R.version
install.packages("phytools")
R.version
install.packages("phytools")
packageVersion("phytools")
packageVersion("geiger")
packageVersion("phangorn")
packageVersion("ape")
install.packages("geiger")
install.packages("phytools")
R.version
R.version
t1<-read.tree(text="((A,B,C),D);")
plot(t1,type="cladogram")
library(ape)
library(phytools)
t1<-read.tree(text="((A,B,C),D);")
plot(t1,type="cladogram")
is.binary.tree(t1)
t2<-multi2di(t1)
plot(t2,type="cladogram")
set.seed(1) ## so we all have the same thing!
## rotating nodes
tree<-rtree(n=40)
plotTree(tree,node.numbers=T)
rt.52<-rotate(tree,52)
plotTree(rt.52)
rt.all<-rotateNodes(tree,"all")
plotTree(rt.all)
rr.67<-root(tree,node=67)
plotTree(rr.67)
rr.65<-reroot(tree,65,position=0.5*tree$edge.length[which(tree$edge[,2]==65)])
plotTree(rr.65)
rr.interactive<-reroot(tree,interactive=TRUE)
packageVersion("ade4")
install.packages("ade4")
install.packages("adegenet")
install.packages("vegan")
install.packages("cluster")
install.packages("vegan")
install.packages("mgcv")
install.packages("vegan")
install.packages("spdep")
install.packages("libudunits2-dev")
install.packages("units")
install.packages("classInt")
install.packages("e1071")
install.packages("class")
install.packages("e1071")
install.packages("classInt")
install.packages("KernSmooth")
install.packages("classInt")
install.packages("SF")
install.packages("sf")
install.packages("gdal-config")
install.packages("sf")
install.packages("spdep")
install.packages("boot")
install.packages("adegenet")
f
attributes(f)
library(phytools)
datos <- c(8.76, 21.33, 24.00, 21.84, 15.40, 25.64, 18.78, 14.60, 24.26, 21.63, 19.27, 19.59, 24.04, 19.61, 21.07)
hist(datos)
?hist
hist(datos, breaks = 7)
datos<-c(18.76, 21.33, 24.00, 21.84, 15.40, 25.64, 18.78, 14.60, 24.26, 21.63, 19.27, 19.59, 24.04, 19.61, 21.07)
hist(datos, breaks = 7)
summary(datos)
install.packages("stats")
sd(datos)
install.packages("stats")
install.packages("stats")
install.packages("stats")
sd
?sd
sd(datos)
summary(datos)
plot(datos, breaks=7)
hist(datos, breaks=7)
sd(datos)
summary(datos)
##desviación  estandar:
sd(datos)
### mediana
summary(datos)
?pbinom
pbinom(2,10,0.05)
dbinom(2,10,0.05)
dbinom(1,10,0.05)
dbinom(0,10,0.05)
pbinom(0.95,10,0.05)
dbinom(8,10,0.05)
dbinom(0,10,0.05)
dbinom(7,10,0.05)
rnorm(1000,5,1)
norm<-rnorm(1000,5,1)
hist(norm)
dnorm(0.9,5,1)
?dnorm
x <- c(1,4,2,3,4,NA,2,3,NA)
which(x is NA)
which(x==NA)
na.omit(x)
y <- na.omit(x)
y
y
is.null(y)
is.null(x)
is.na(x)
?pbinom
pbinom(0.25,20,0.25)
pbinom(0,20,0.25)
pbinom(0:5,20,0.25)
sum(pbinom(0:5,20,0.25))
pbinom(5,20,0.25)
pbinom(10,20,0.25)
qbinom(10,20,0.25)
dbinom(10,20,0.25)
dbinom(5,20,0.25)
dbinom(1:20,20,0.25)
sum(dbinom(1:20,20,0.25))
dbinom(0,20,0.25)
pbinom(0.003171212, 20,0.25)
qbinom(0.003171212, 20,0.25)
rbinom(0.003171212, 20,0.25)
dbinom(5, 20,0.25)
pbinom(0.2023312,20,0.25)
rbinom(0.2023312,20,0.25)
qbinom(0.2023312,20,0.25)
pbinom(0.2023312,20,0.25)
?qnorm
qnorm(0.05)
qnorm(0.05,22.2,1,42)
dnorm(-1.64)
pnorm(-1.64)
pnorm(21.9, 22.2, 1,42)
dat<-c(10.2,9.7,10.1,10.3,10.1,9.8,9.9,10.4,10.3,9.8)
summary(dat)
length(dat)
sd(dat)
qnorm(0.05)
pnorm(-1.64)
pnorm(10.06,10,0.245)
qnorm(0.005,10)
qnorm(-0.005,10)
qnorm(0.995,10)
?t.test
??student
t.test(x)
t.test(dat)
fum<-c(0.48,0.71,0.98,0.68,1.18,1.36,0.78,1.64)
qqnorm(fum)
sd(fum)
summary(fum)
qnorm(-1.65)
pnorm(1.65)
pnorm(1.65)
qnorm(1.65)
qnorm(0.05)
pnorm(-1.64)
qnorm(0.025,0.9762,0.391)
qnorm(0.975,0.9762,0.391)
nofum<-c(0.97,0.72,1,0.81,0.62,1.32,1.24,0.99,0.90,0.74,0.88,0.94,1.16,0.86,0.85,0.58,0.57,0.64,0.98,1.09,0.92,0.78,1.24,1.18)
qqnorm(nofum)
summary(nofum)
pnorm(0.9158,0.9762,0.391)
dnorm(0.05)
dnorm(1.65)
qnorm(0.05)
dnorm(-1.64)
?qnorm
pnorm(-1.64)
qnorm(0.085)
pnorm(2.6)
1-pnorm(2-6)
1-(pnorm(2-6))
1-(pnorm(2.6))
(1-(pnorm(2.6)))*2
pbinom(11,12,0.7)
1- (pbinom(11,12,0.7))
pbinom(12,12,0.7)
dbinom(11,12,0.7)
dbinom(12,12,0.7)
dbinom(8,12,0.7)
1-dbinom(11,12,0.7)
pnorm(2.02)
1-pnorm(2.02)
qnorm(0.01)
qnorm(0.005)
rec<-c(10.2,9.7,10.1,10.3,10.1,9.8,9.9, 10.4,10.3,9.8)
summary(rec)
sd(rec)
length(rec)
pt(0.77,9)
1-pt(0.77,9)
qt(0.025,9)
qt(0.995,9)
qt(0.975,9)
pt(58.3, 35)
1 -pt(58.3, 35)
?t.test
pt(-1.268,35)
num<-c(1,0,2,6,2,9,0,8,1,7)
summary(num)
sd(num)
length(num)
pt(0.3612, 9)
t.test(num)
?t.test
t.test(num, mu = 3.2)
t.test(num, mu = 3.2, alternative = "two.sided")
pt(0.36116, 9)
qt(0.6368438)
qt(0.025,9)
qt(0.975,9)
qt(0.975,9) + 3.2
?pt
pt(0.36116,9)
num2<-c(1,1,2,5,5,9,8,9,5,4)
length(num2)
mean(num2)
mean(num2)
sd(num2)
t.test(num2,mu=3.2)
pt(1.7713)
pt(1.7713,9)
1-pt(1.7713,9)
1-pt(1.7713,9) * 2
(1-pt(1.7713,9)) * 2
t.test(num,mu=3.2)
1-pt(0.36116,9)
(1-pt(0.36116,9))*2
pt(2.262,9)
pt(-2.262,9)
pt(-0.36116,9)
num3<-c(1,0,2,4,5,6,0,7,0,4)
mean(num3)
sd(num3)
pt(-0.35885,9)
t.test(num3,mu=3.2)
cali<-c(98,99,99,97,90,85,84,82,81,79,68,61,60,56)
bogota<-c(98,96,96,95,85,80,79,78,75,73,72,69,67,62,60)
mean(cali)
length(cali)
sd(cali)
mean(bogota)
mean(bogota)
length(bogota)
sd(bogota)
pt(0.459,27)
1-pt(0.459,27)
t.test(bogota,cali)
qnorm(0.05)
qnorm(0.025)
install.packages("pwr")
?t.test
?lm
install.packages("lmtest")
install.packages("car")
install.packages("rio")
install.packages("foreign")
install.packages("rio")
install.packages("maptools")
install.packages("car")
library(ape)
library(seqinr)
library(phangorn)
library(ade4    )
?dist.alignment
?sqrt
load("/home/kncalderong/Documentos/kevin/Tesis/Virus Zika/Desarrollo/R-Dendrogramas/global2.0/Global_2.RData")
pnorm(-1.64)
pnorm(-2)
z<-c(-2.48,
-2.86,
-3.48,
-1.89,
-3.20,
-1.75,
-4.65,
-3.05,
-1.30,
-1.89,
-3.88,
-1.21,
-2.13,
-2.62,
-1.74,
-1.40,
-1.69,
-1.86,
-1.61,
-1.85,
-1.73,
-2.43,
-2.04,
-1.68,
-1.11,
-1.14,
-2.32,
-1.58,
-1.44,
-2.61,
-1.72,
-1.43,
-1.63,
-2.99,
-2.65,
-1.78,
-1.21,
-1.58,
-1.51,
-1.69,
-0.91,
-3.57,
-3.65,
-3.35,
)
<-c(-2.48,-2.86,-3.48,-1.89,-3.20,-1.75,-4.65,-3.05,-1.30,-1.89,-3.88,-1.21,-2.13,-2.62,-1.74,-1.40,-1.69,-1.86,-1.61,-1.85,-1.73,-2.43,-2.04,-1.68,-1.11,-1.14,-2.32,-1.58,-1.44,-2.61,-1.72,-1.43,-1.63,-2.99,-2.65,-1.78,-1.21,-1.58,-1.51,-1.69,-0.91,-3.57,-3.65,-3.35)
z<-c(-2.48,-2.86,-3.48,-1.89,-3.20,-1.75,-4.65,-3.05,-1.30,-1.89,-3.88,-1.21,-2.13,-2.62,-1.74,-1.40,-1.69,-1.86,-1.61,-1.85,-1.73,-2.43,-2.04,-1.68,-1.11,-1.14,-2.32,-1.58,-1.44,-2.61,-1.72,-1.43,-1.63,-2.99,-2.65,-1.78,-1.21,-1.58,-1.51,-1.69,-0.91,-3.57,-3.65,-3.35)
hist(z)
shapiro.test(z)
load("/home/kncalderong/Documentos/kevin/Tesis/Virus Zika/Desarrollo/RNAz_2.0/Estructural/plots/plots.RData")
setwd("~/Documentos/kevin/Backup/Phyton_coursera/Capstone/Own_project")
dt1<-read.csv("humanpower1.csv", header = TRUE)
View(dt1)
class(dt1$id)
class(dt1$o2)
class(dt1$wattsPerKg)
dt1$id<-as.factor(dt1$id)
dt2<-read.csv("humanpower2.csv",header = TRUE)
dt2$id<-as.factor(dt2$id)
??cor.test
cor.test(dt1$o2,dt1$wattsPerKg)
lm(dt1$o2~dt1$wattsPerKg)
by(dt1$wattsPerKg,dt1$o2,cor.test)
by(dt1$wattsPerKg~dt1$o2,cor.test)
plot(lm(dt1$o2~dt1$wattsPerKg))
plot(dt1$wattsPerKg~dt1$o2)
by(dt1$wattsPerKg,dt1$o2,plot)
by(dt1$wattsPerKg~dt1$o2,dt1$id,plot)
by(dt1$id,dt1$wattsPerKg~dt1$o2,plot)
plot(dt1$wattsPerKg~dt1$o2)
cor.test(dt1$wattsPerKg~dt1$o2)
cor.test(dt1$wattsPerKg,dt1$o2)
plot(dt2$wattsPerKg~dt2$o2)
cor.test(dt2$wattsPerKg,dt2$o2)
